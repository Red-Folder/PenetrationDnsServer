using System;
using System.Collections.Generic;
using System.Collections.Concurrent;
using System.Linq;
using System.Text;
using System.Net;
using System.Net.Sockets;
using System.Threading;
using DNS.Protocol;
using DNS.Protocol.ResourceRecords;
using DNS.Client;
using DNS.Client.RequestResolver;
using DNS.Server;
using System.Diagnostics;

namespace DnsServer
{
    class PenTestingDnsServer
    {
        private const int DEFAULT_PORT = 53;
        private const int UDP_TIMEOUT = 2000;
        private const int UDP_LIMIT = 512;

        private UdpClient udp;
        private IPEndPoint local;
        private IAsyncResult currentAsyncResult;

        public void Listen(int port = DEFAULT_PORT)
        {
            udp = new UdpClient(port);

            local = new IPEndPoint(IPAddress.Any, port);

            udp.Client.SendTimeout = UDP_TIMEOUT;

            Trace.TraceInformation("Start run");

            StartListen();
        }

        private void StartListen()
        {
            try
            {
                currentAsyncResult = udp.BeginReceive(new AsyncCallback(HandleReceive), null);
            }
            catch (SocketException ex)
            {
                Trace.TraceError("Error occurred: {0}", ex);
            }
        }

        private void HandleReceive(IAsyncResult asyncResult)
        {
            byte[] clientMessage = null;
            clientMessage = udp.EndReceive(asyncResult, ref local);
            StartListen();

            var request = Request.FromArray(clientMessage);

            var response = Response.FromRequest(request);

            var domain = new Domain(request.Questions[0].Name.ToString().Replace(".Home", ""));
            var ipAddress = IPAddress.Parse("127.0.0.1");
            var ttl = new TimeSpan(0);
            response.AnswerRecords.Add(new IPAddressResourceRecord(domain, ipAddress, ttl));

            udp.Send(response.ToArray(), response.Size, local);
        }

        public void Close()
        {
            if (udp != null)
            {
                udp.EndReceive(currentAsyncResult, ref local);
                udp.Close();
            }
        }
    }
}

